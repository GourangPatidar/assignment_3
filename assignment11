Q1
x = 1
y = -1
assert int(y) >= 0, "Invalid Operation" # y can't be negetive integer
print(x / y)
_________________________________________________________________________________

Q2
def raise_assert(egg,bacon):
    egg = egg.upper()
    bacon = bacon.upper()
    assert not(egg == bacon), 'Eggs/Bacon should not be same, which are same now'

________________________________________________________________________________

Q3
# this shows always a AssertionError
x = 0
y=input("enter the no.")
y=int(y)
assert x!=0, "Invalid Operation" # y can't be negetive integer
print(y/x)
_________________________________________________________________________________

Q4
import logging
logging.basicConfig(filename="test.log" ,level = logging.DEBUG , filemode='w')
loggging.debug("ineuron")
_________________________________________________________________________________

Q5
import logging
logging.basicConfig(filename="programLog.txt" ,level = logging.DEBUG , filemode='w')
loggging.debug("ineuron")
___________________________________________________________________________________

Q6
the all five levels of logging are:
1. debug
2. info
3. warning
4. error
5. critical
__________________________________________________________________________________


Q7
logging.disable = True
________________________________________________________________________________

Q8
Python has a built-in module logging which allows writing status messages to a file or any other output streams.
The file can contain the information on which part of the code is executed and what problems have been arisen.
_________________________________________________________________________________

Q9
step out tells the debugger to finish the current location and break after it.
step in tells the debugger to go to  the next function.
step over tells the debugger to execute the next function and break afterwards.
_________________________________________________________________________________

Q10
This will cause the program to continue running normally,
without pausing for debugging untill it terminates or reaches a breakpoint.
___________________________________________________________________________________

Q11
the breakpoint is a point in program where the program stop executing.
____________________________________________________________________________